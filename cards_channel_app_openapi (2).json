{
  "openapi": "3.0.1",
  "info": {
    "title": "Cards Channel App",
    "description": "Application serving card domain backend for frontend application - card info, creation and settings.",
    "version": "1.0-SNAPSHOT"
  },
  "servers": [
    {
      "url": "https://api-ext-non-prod.vodeno.net/uat/0001vaen3r/cards-channel-app",
      "description": "VCP server url"
    }
  ],
  "security": [
    {
      "X-Token": []
    }
  ],
  "tags": [
    {
      "name": "Customer",
      "description": "Module responsible for obtaining information about customer"
    },
    {
      "name": "Card PIN Validation",
      "description": "Module responsible for validating PIN code"
    },
    {
      "name": "Card Encryption",
      "description": "Module responsible for obtaining public keys from MPTS system"
    },
    {
      "name": "Card Status",
      "description": "Module responsible for changing card status"
    },
    {
      "name": "Card Settings",
      "description": "Module responsible for adjusting card settings"
    },
    {
      "name": "Cards Creation",
      "description": "Module responsible for creating cards and obtaining information about them"
    },
    {
      "name": "Card Plastic Order",
      "description": "Module responsible for ordering plastic card"
    },
    {
      "name": "Card PIN",
      "description": "Module responsible for setting card PIN code"
    },
    {
      "name": "Card Limits",
      "description": "Module responsible for setting and suspending card limits"
    },
    {
      "name": "Card Credentials",
      "description": "Module responsible for handling security data and tokenization"
    }
  ],
  "paths": {
    "/api/1/cards/{rbsNumber}/cvc-encrypted": {
      "post": {
        "tags": [
          "Card Credentials"
        ],
        "summary": "Get card encrypted CVC.",
        "description": "Service enabling to retrieve encrypted CVC, which is used for multiple actions related do Card data, incl. card data, PIN, card tokenization.",
        "operationId": "getCvcEncrypted",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptedRequest"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "publicKeyOrCertificate": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwlwoO0VVpvJ7V1/X31Zh6dFJ/pU+o8NOx4ahUcNi2a/+cuDzda7FycGX6dejH7GBjOfV1KGmUZkzqZ4Sf8GxP0I4eAlK66m/Bojd8jqJ1qy3MG/FaTTISbx2qWUwb+sIhSuxyU0GpnUIlYFBiq8dp/yxWUtyo5pUKvws1lrm6cYE6YVk+yFpOObamEXmeHt6nCV3rw2BlR1hx1U+EHOFbTH5DvTV3MBIS9DOgLAOd+6YAV8B4JoAiCaJlZgJGu68kpjKRUOo35/emox77uLz7X3tMXGOXiwlAnp/97Y2dM9ng40B907kVwWJn5cJXAnTi7CiQAtBAP9qLjFYpuxEbwIDAQAB",
                    "operationId": "confirmed_vks_operation_id"
                  }
                }
              }
            }
          },
          "required": true,
          "description": ""
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CvcEncryptedResponse"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "cvc": "C1BCAE8FAB4D92511614AB615FC869598556A2AECF21053DAFDABD43D027B704580D0C916C520C7B52EDADDD6E54FD0F703C1E1246BB685287F3C699E7CFD8ECCB3F76B4689351588E28CF7B441E8111D6E544BFFE264679D5B7DFF0858CC6461565CFA09DB708CC58089FB7F6843607D240A14925C21F228207972C4A6CD282994069A53DEE814A9AD93EA7653FCCE3B1792EBBA6863AF834236A078C8F1C622282773E7E5E3690B5B25A1FC79D7927BC50029DC536C2994AC97207542CF7DBEE760D0720F992758526BFCCD130430F8A6A1205B0C0A14B14F87E7A4FCBC65D282B29BE931FA5BAF261743287299073B04F3890114CC94778A8A4E63FB159CB"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid or VKS verification failed - Possible codes: SHOW_PIN_NOT_CONFIRMED, SHOW_PAN_NOT_CONFIRMED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "SHOW_PIN_NOT_CONFIRMED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/security-data": {
      "post": {
        "tags": [
          "Card Credentials"
        ],
        "summary": "Get card security data.",
        "description": "Action enabling the customer to request for a PIN display on the mobile application. As encryption services are required from the PCI DSS perspective, PIN and other card security data actions are only available via mobile application. The action security is verified by operationId field which must point to a confirmed show PIN process.",
        "operationId": "getSecurityData",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityDataRequest"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "cardExpiryDate": "2405",
                    "publicKeyOrCertificate": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwlwoO0VVpvJ7V1/X31Zh6dFJ/pU+o8NOx4ahUcNi2a/+cuDzda7FycGX6dejH7GBjOfV1KGmUZkzqZ4Sf8GxP0I4eAlK66m/Bojd8jqJ1qy3MG/FaTTISbx2qWUwb+sIhSuxyU0GpnUIlYFBiq8dp/yxWUtyo5pUKvws1lrm6cYE6YVk+yFpOObamEXmeHt6nCV3rw2BlR1hx1U+EHOFbTH5DvTV3MBIS9DOgLAOd+6YAV8B4JoAiCaJlZgJGu68kpjKRUOo35/emox77uLz7X3tMXGOXiwlAnp/97Y2dM9ng40B907kVwWJn5cJXAnTi7CiQAtBAP9qLjFYpuxEbwIDAQAB",
                    "operationId": "confirmed_vks_operation_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityDataResponse"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "encryptedPAN": "0146332D82F0714AEE6D43FE2573B0A39A1EB6FD9EDCAFB1D78D884E723C2296BFD35498CAF44B166D25F625E964B74CB3DC2B4AA74BC2E1B8479EEA4CB633F8A4863F551DB82EA8AC60B165D4BE0556F6FD1F408C132F821ADC067D3C48E93799C12066523ADE1119193EBA055BA4D68CFA5827919D261692095846BFF1289B6F48718EEE51AD5D2BC851AE16911B466C25CFAB89212825C03036F9337B75EDCD8C2EB2322AE5675297CEB6A3776596379B466B7002BF8C868BF2588F50F5BAD7CA44BA9C4ECFD490257CD104F8633EC4E15CA8682D5FFFEAD38F889A322351629CC2FE4112A20161A32BFCEB2EB4CB86B82B0FD3AC966256EECB5806E29424",
                      "encryptedSecurityValue": "2950E256DD64AB5F",
                      "encryptedZPK": "5FE7CAD321F042F77341E2EB5057699F1DF650650C804630A175735057866BBBE7695F58124E3847095E31D3B77DE737F0405204F963334C8975A159BF1F168AEF7B59EB602B7417D5277FA21705E0705D8F7285C4A5BC6A7E7DA39E09A2F89AF8860CA4682BDA64E19924FDBEDCEAE4B829F4CBFEBD1B70BC0496E095CB804DC21602DAB728FE0CCA9167F5E9075A73380B7F3EF107827F61211609531566853620C2935667CAE40EB36460B85E60FBC5F7AFE4CB4D5861C02A7E96947AE6E20CF99F14A756D3DAABA6C49C975E0AB9CAD05E7B9172FA3B490A109A63BD676905BFCF962C9A0B76D8B79ECD0C1659085ECA42E185E4D0BD87E3BE60640DBAA2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid or VKS verification failed - Possible codes: SHOW_PIN_NOT_CONFIRMED, SHOW_PAN_NOT_CONFIRMED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "SHOW_PIN_NOT_CONFIRMED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/details-encrypted-pan": {
      "post": {
        "tags": [
          "Card Credentials"
        ],
        "summary": "Get card details encrypted PAN number.",
        "description": "Action enabling the customer to request for a PAN display on the mobile application. As encryption services are required from the PCI DSS perspective, PIN and other card security data actions are only available via mobile application. The action security is verified by operationId field which must point to a confirmed show PAN process.",
        "operationId": "getDetailsEncryptedPAN",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptedRequest"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "publicKeyOrCertificate": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwlwoO0VVpvJ7V1/X31Zh6dFJ/pU+o8NOx4ahUcNi2a/+cuDzda7FycGX6dejH7GBjOfV1KGmUZkzqZ4Sf8GxP0I4eAlK66m/Bojd8jqJ1qy3MG/FaTTISbx2qWUwb+sIhSuxyU0GpnUIlYFBiq8dp/yxWUtyo5pUKvws1lrm6cYE6YVk+yFpOObamEXmeHt6nCV3rw2BlR1hx1U+EHOFbTH5DvTV3MBIS9DOgLAOd+6YAV8B4JoAiCaJlZgJGu68kpjKRUOo35/emox77uLz7X3tMXGOXiwlAnp/97Y2dM9ng40B907kVwWJn5cJXAnTi7CiQAtBAP9qLjFYpuxEbwIDAQAB",
                    "operationId": "confirmed_vks_operation_id"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailsEncryptedPANResponse"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "card": {
                        "accountContractNumber": "026-P-BE03648773605684",
                        "accountID": "114643770",
                        "amendmentDate": "2021-05-14T13:09:00",
                        "amendmentOfficer": "14150;WS Runtime Vodeno",
                        "availableBalance": 1000000000000,
                        "cardContractNumber": "550112******2170",
                        "cardExpiryDate": "2405",
                        "cardID": "119586290",
                        "cardStatusData": {
                          "productionStatus": "Locked",
                          "statusCode": "00",
                          "statusDetails": "Card OK"
                        },
                        "cardholderID": "46596950",
                        "cardholderNumber": null,
                        "cardholderShortName": "Msngb Atrlqrep",
                        "cbsNumber": "026-P-002000013-000004-633936072",
                        "contractName": "Msngb Atrlqrep",
                        "currency": "EUR",
                        "dateOpen": "2021-05-13",
                        "embossedData": {
                          "embossedCompanyName": "EUDCLD",
                          "embossedFirstName": "QFI",
                          "embossedLastName": "NRZUUCCZ",
                          "embossedTitle": null
                        },
                        "productName": "026 MDS 550112 GERMANY"
                      },
                      "encryptedPAN": "0C9F27164E85AF9CE744C07591770269F4DF330A7C1A0D54FD59FFCBE30EE973726B4A97BDAA47D64A8708DFE0808B33E8B098E19CE0E762FC85FF0B12D385CDA4A988B7001E5070A8F6C4892FE68C0047035ACDBA8B8E26243CA19221E710F480F385EDA28CFCC3CE37DB965868A3E7334601DBCC13283913C8B93DC19FA38AD3B1223EC5364ED3256598F141F42FA1EB1DFDD00E2F840E38D3F655EC1AB109654EE230F112E837E824D4B31C7115B976B141911AE85B14F0921BDE169AF95E458C38AD9A35DC165FD46DF031DC2C2AAF8C46B7970B725289493C87EE4B6397A6E5B64F094C6882FEF3832283F10D010F5C79BDC1F2DD7F9DBA434CB1F14EA7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid or VKS verification failed - Possible codes: SHOW_PIN_NOT_CONFIRMED, SHOW_PAN_NOT_CONFIRMED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "SHOW_PIN_NOT_CONFIRMED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/google/iidd": {
      "put": {
        "tags": [
          "Card Credentials"
        ],
        "summary": "Get Google initiated digitization data.",
        "description": "Endpoint used to initiate card tokenization using push provisioning - direct request to Google from a mobile app. It allows \"one click\" digitization without a need to enter card data in the Google wallet application. **Used to Verify that requesting customer is valid and is an owner of provided card.**",
        "operationId": "getGoogleIssuerInitiatedDigitizationData",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IIDDRequest"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "keyIndex": "B1569309802939",
                    "initiateDigitizationData": "7b2265787069726174696f6e223a2232323039222c226e616d65223a225465737420416c62657274222c226e6f6e6365223a22222c226e6f6e63655369676e6174757265223a22222c227072696d6172794163636f756e744e756d626572223a2235333734313330313834383938303634222c2270726f6475637454797065223a2274657374222c227075626c6963436572746966696361746573223a22222c227262734e756d626572223a223032362d502d3030303230303133352d3030303030322d383733303438373731227d",
                    "rbsNumber": "026-P-002000013-000004-633936072"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IIDDResponse"
                },
                "examples": {
                  "response-json": {
                    "value": {
                      "issuerInitiatedDigitizationData": "iidd_data"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/apple/iidd": {
      "put": {
        "tags": [
          "Card Credentials"
        ],
        "summary": "Get Apple initiated digitization data.",
        "description": "Endpoint used to initiate card tokenization using in app provisioning - direct request to Apple from a mobile app. It allows \"one click\" digitization without a need to enter card data in the iOS Wallet application. **Used to Verify that requesting customer is valid and is an owner of provided card.**",
        "operationId": "getAppleIssuerInitiatedDigitizationData",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IIDDRequest"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "keyIndex": "B1569309802939",
                    "initiateDigitizationData": "7b2265787069726174696f6e223a2232323039222c226e616d65223a225465737420416c62657274222c226e6f6e6365223a22222c226e6f6e63655369676e6174757265223a22222c227072696d6172794163636f756e744e756d626572223a2235333734313330313834383938303634222c2270726f6475637454797065223a2274657374222c227075626c6963436572746966696361746573223a22222c227262734e756d626572223a223032362d502d3030303230303133352d3030303030322d383733303438373731227d",
                    "rbsNumber": "026-P-002000013-000004-633936072",
                    "walletCertificatesList": []
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IIDDResponse"
                },
                "examples": {
                  "response-json": {
                    "value": {
                      "issuerInitiatedDigitizationData": "iidd_data"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings/limits/suspend": {
      "post": {
        "tags": [
          "Card Limits"
        ],
        "summary": "Suspend card limits.",
        "description": "Endpoint used to remove a monthly global spending limit that was set on a card by the customer.",
        "operationId": "suspendCardLimit",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings/limits": {
      "put": {
        "tags": [
          "Card Limits"
        ],
        "summary": "Change card limits.",
        "description": "Endpoint used to set a monthly global spending limit on a card by the customer.",
        "operationId": "changeCardLimits",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardLimitDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "monthlySpendingLimit": 5000
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/pin/encrypted": {
      "post": {
        "tags": [
          "Card PIN"
        ],
        "summary": "Set card encrypted PIN code.",
        "description": "Endpoint used before being able to apply for a plastic card in order to set a PIN code. It can also be used to change PIN code of existing plastic card.",
        "operationId": "setPINEncrypted",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PINSetEncryptedDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "cardExpiryDate": "2405",
                    "keyIndex": "A1562302495400",
                    "newPINBlock": "8b5d433a3e2993d05b7da4b47aa146e1ddae3359404bd02feb7a206d0007573877befd743fe4d9029d2303a75534b5df3f542b0113594380749e20ce13e0521d4a41e38d24c15e7da9c9c50662e3f35c56a19230bbc92ebebb1cf897f9cd14efe3b85fa01404427668443e0a58da796462b1553df29c6eca6528af4ce73ee91f906fec98dce11a4092c248d27dd9c54c7c496c05debabf24c9460f451487856aecd5a5f925ef4b269ca9cfe7d7a022045ef720716d5c841f53b69c35774d30e9fa361b7271c0eb63ad4bb57c9734e646057116b99519d4e5f946b5864e97161da3482ec019628ffbbfc7be8650d3447be1a1bfe0f5507fb7d5728cc20da0556d"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/plastic": {
      "post": {
        "tags": [
          "Card Plastic Order"
        ],
        "summary": "Order physical card.",
        "description": "Endpoint used to request for a plastic production of a virtual card.",
        "operationId": "orderPhysicalCard",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhysicalCardOrderDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "firstName": "Jan",
                    "lastName": "Kowalski",
                    "companyName": null,
                    "embossedData": {
                      "firstName": "JAN",
                      "lastName": "KOWALSKI",
                      "companyName": null
                    },
                    "deliveryMode": "STANDARD",
                    "deliveryAddress": {
                      "streetName": "Grochowska",
                      "streetNumber": "1",
                      "apartment": "1",
                      "city": "Warsaw",
                      "postal": "00-000",
                      "country": "PL"
                    },
                    "plasticVisualCode": "PINK"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/delivery-options": {
      "get": {
        "tags": [
          "Card Plastic Order"
        ],
        "summary": "Get delivery options.",
        "description": "Endpoint used to give the customer a choice of available delivery methods - e.g. standard or express (courier)",
        "operationId": "getDeliveryMethods",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeliveryMethodDTO"
                  }
                },
                "examples": {
                  "json-response": {
                    "value": [
                      {
                        "id": 1,
                        "name": "STANDARD",
                        "date": "2021-05-31",
                        "fee": {
                          "amount": 0,
                          "currency": "EUR"
                        }
                      },
                      {
                        "id": 2,
                        "name": "EXPRESS",
                        "date": "2021-05-24",
                        "fee": {
                          "amount": 0,
                          "currency": "EUR"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/embossed": {
      "post": {
        "tags": [
          "Card Plastic Order"
        ],
        "summary": "Create embossed data proposal.",
        "description": "Endpoint used for generating accepted candidates for data embossed on cards.It can be especially helpful in situations where a card holder name is too long to place data on a plastic card. It allows to present the customer shorter emboss name options.",
        "operationId": "proposedEmbossedData",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbossedDataDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "firstName": "Someone-äö",
                    "lastName": "Müller",
                    "companyName": "Financial Service Provider"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmbossedDataDTO"
                  }
                },
                "examples": {
                  "json-response": {
                    "value": [
                      {
                        "firstName": "SOMEONE-ÄÖ",
                        "lastName": "MÜLLER",
                        "companyName": "Financial Service Provider"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/embossed": {
      "post": {
        "tags": [
          "Card Plastic Order"
        ],
        "summary": "Create embossed data proposal.",
        "description": "Endpoint used for generating accepted candidates for data embossed on cards.It can be especially helpful in situations where a card holder name is too long to place data on a plastic card. It allows to present the customer shorter emboss name options.It can be used in case of creating virtual card with plastic (there is no need to pass rbs to this endpoint).",
        "operationId": "proposedEmbossedDataWithoutCard",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbossedDataDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "firstName": "Someone-äö",
                    "lastName": "Müller",
                    "companyName": "Financial Service Provider"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmbossedDataDTO"
                  }
                },
                "examples": {
                  "json-response": {
                    "value": [
                      {
                        "firstName": "SOMEONE-ÄÖ",
                        "lastName": "MÜLLER",
                        "companyName": "Financial Service Provider"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards": {
      "post": {
        "tags": [
          "Cards Creation"
        ],
        "summary": "Create card.",
        "description": "Endpoint creates asynchronously a digital card of selected type and scheme for a given IBAN.",
        "operationId": "createCard",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCardDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "iban": "BE03648773605684",
                    "cardType": "DEBIT",
                    "paymentScheme": "MASTERCARD",
                    "virtualVisualCode": "PINK"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/allowed-payment-schemes": {
      "get": {
        "tags": [
          "Cards Creation"
        ],
        "summary": "Get allowed payment schemes.",
        "description": "Endpoint allows to retrieve allowed payment schemes for a customer.",
        "operationId": "getAllowedPaymentSchemes",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "MASTERCARD",
                      "MAESTRO"
                    ]
                  }
                },
                "examples": {
                  "json-response": {
                    "value": [
                      "MAESTRO",
                      "MASTERCARD"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}": {
      "get": {
        "tags": [
          "Cards Creation"
        ],
        "summary": "Get card by RBS number.",
        "description": "Endpoint returns card data from HILO by RBS number. Works for every customer type.",
        "operationId": "getCardByRbs",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "panFourLastDigits": "2170",
                      "expirationDate": "24/05",
                      "firstName": "Pawel",
                      "lastName": "Pawelken",
                      "companyName": null,
                      "customerName": "JAN KOWALSKI",
                      "type": "DEBIT",
                      "state": "ACTIVE",
                      "rbsNumber": "026-P-002000013-000004-633936072",
                      "plasticForm": true,
                      "locked": false,
                      "possibleActions": [
                        "CLEAR_PIN_ATTEMPTS",
                        "HISTORY",
                        "SETTINGS",
                        "LOCK",
                        "CLEAR_CVC_ATTEMPTS",
                        "SHOW_PIN"
                      ],
                      "bin": "550112",
                      "mainAccount": "BE03648773605684",
                      "accountInternalName": "CURA-1",
                      "limit": {
                        "enabled": false,
                        "currency": "EUR",
                        "accountMax": null,
                        "cardMax": 50000,
                        "cardCurrent": 123,
                        "used": 10,
                        "usedCredit": null
                      },
                      "dueDate": null,
                      "availableFunds": null,
                      "paymentScheme": "MASTERCARD",
                      "delivery": {
                        "status": "ORDERED",
                        "expectedDate": "2021-05-28",
                        "orderDate": "2021-05-13",
                        "sentDate": null,
                        "address": {
                          "streetName": "Cicha",
                          "streetNumber": "16",
                          "apartment": "2",
                          "city": "Warsaw",
                          "postal": "05-230",
                          "country": "PL"
                        },
                        "shipmentNumber": "",
                        "shipmentCompanyName": ""
                      },
                      "autoRenewalForPlasticOrder": false,
                      "plasticVisualCode": "PINK",
                      "virtualVisualCode": ""
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/clear-cvc-attempts": {
      "put": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Clear card CVC attempts.",
        "description": "Endpoint allowing to reset CVC attempts of a customer if the card is blocked by a customer due to multiple invalid entries.",
        "operationId": "clearCvcAttempts",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/clear-pin-attempts": {
      "put": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Clear card PIN code attempts.",
        "description": "Endpoint allowing to reset PIN attempts of a customer if the card is blocked by a customer due to multiple invalid entries.",
        "operationId": "clearPinAttempts",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings": {
      "get": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Get card settings.",
        "description": "Endpoint is used to retrieve card from HILO by RBS number and extract its settings.",
        "operationId": "getCardSettings",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardSettingsDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "contactless": true,
                      "cashWithdraws": true,
                      "ecommerce": true,
                      "cardStripeTransactions": false,
                      "geoSecurity": null,
                      "abroadPayments": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings/contactless": {
      "put": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Set card contactless flag.",
        "description": "Endpoint used to switch on and off contactless and mobile proximity transactions.",
        "operationId": "changeCardContactless",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardSettingsRequestDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "value": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings/cash-withdraws": {
      "put": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Set card cash withdrawals flag.",
        "description": "Endpoint used to switch on and off cash transactions.",
        "operationId": "changeCardCashWithdraws",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardSettingsRequestDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "value": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings/online-payments": {
      "put": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Set card online payments flag.",
        "description": "Endpoint used to switch on and off ecommerce transactions.",
        "operationId": "changeCardOnlinePayments",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardSettingsRequestDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "value": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/settings/security-magstripe": {
      "put": {
        "tags": [
          "Card Settings"
        ],
        "summary": "Set card security magstripe flag.",
        "description": "Endpoint used to switch on and off transactions with magstripe of a plastic card.",
        "operationId": "changeMagstripe",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "description": "Content type application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardSettingsRequestDTO"
              },
              "examples": {
                "json-request": {
                  "value": {
                    "value": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/freeze": {
      "post": {
        "tags": [
          "Card Status"
        ],
        "summary": "Freeze card.",
        "description": "Endpoint used to retrieve card from HILO by RBS number and freeze card (set a temporary lock and rejects all transaction authorizations to a card)",
        "operationId": "blockCard",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/unfreeze": {
      "post": {
        "tags": [
          "Card Status"
        ],
        "summary": "Unfreeze card.",
        "description": "Endpoint used to retrieve card from HILO by RBS number and unfreeze card (remove a temporary lock and enables card for transaction authorizations)",
        "operationId": "unlockCard",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/restrict": {
      "post": {
        "tags": [
          "Card Status"
        ],
        "summary": "Restrict card.",
        "description": "Endpoint retrieves card from HILO by RBS number and restricts (action in irrevocable) the card",
        "operationId": "restrictCard",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cards/{rbsNumber}/view": {
      "delete": {
        "tags": [
          "Card Status"
        ],
        "summary": "Delete card from viewing.",
        "description": "Deletes previously restricted card from view. Such card won't be returned with other cards in customer data endpoints",
        "operationId": "deleteFromViewing",
        "parameters": [
          {
            "name": "rbsNumber",
            "in": "path",
            "description": "card reference number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response"
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/encryption/public-key/{type}": {
      "get": {
        "tags": [
          "Card Encryption"
        ],
        "summary": "Get public RSA key.",
        "description": "Endpoint allowing to retrieve public key for actions requiring public key: \n* **IIDD** -> for tokenizing the card in in-app provisioning process\n* **PINBLOCK** -> for setting the PIN process",
        "operationId": "getPublicRSAKey",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "type of public key to obtain",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "IIDD",
                "PINBLOCK"
              ]
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicRSAKeyResponse"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "keyIndex": "A1620997743648",
                      "publicRSAKey": "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsyjlQHyaUOr0t1iBXX1HLijTMFtbkFmC5vtAofDjs0hL/UP0bPrXvxLo/1LeQpdOT17hkqNi7MPmQ3ez03usHgCcXWp0O9IjDRlai/cwv3EgLvXfnF71Mj6eE2Al3yrieIDUiY/ppQgYylX+WaG5gsR8AcCOxzPpuX2Bzx17sis4DOVdG/x73ZMMTvukOt7bdb1A2BdReAUMjRXEQ9IVicyPT/HeYEzeKoRbvE86R9OSGOXpGtHJoTFiAonBhXawMC+HL3Yd1QxStts7zrZsg6SxSya0Z4qwe44WVTlplY8bXLUJtvMpLeBckXdld+6g2c+DeNmF+DonHM4TxXD1EwIDAQAB"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/mailing-address": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer mailing address.",
        "description": "Endpoint used to retrieve customer from HILO and extract mailing address to help in prefilling card delivery address.",
        "operationId": "getCustomerMailingAddress",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAddressDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "streetName": "Main Street",
                      "streetNumber": "42",
                      "apartment": "4a",
                      "city": "Brussels",
                      "postal": "1050",
                      "country": "BE"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer info.",
        "description": "Endpoint allows to retrieve customer package type, cards and accounts (debit and credit) that are defined in a core system - HILO.",
        "operationId": "getCustomer",
        "parameters": [
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer  - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "packageType": "RETAIL_STANDARD",
                      "cards": [
                        {
                          "panFourLastDigits": "2170",
                          "expirationDate": "24/05",
                          "firstName": "Pawel",
                          "lastName": "Pawelken",
                          "companyName": null,
                          "customerName": "JAN KOWALSKI",
                          "type": "DEBIT",
                          "state": "ACTIVE",
                          "rbsNumber": "026-P-002000013-000004-633936072",
                          "plasticForm": true,
                          "locked": false,
                          "possibleActions": [
                            "CLEAR_PIN_ATTEMPTS",
                            "HISTORY",
                            "SETTINGS",
                            "LOCK",
                            "CLEAR_CVC_ATTEMPTS",
                            "SHOW_PIN"
                          ],
                          "bin": "550112",
                          "mainAccount": "BE03648773605684",
                          "accountInternalName": "CURA-1",
                          "limit": {
                            "enabled": false,
                            "currency": "EUR",
                            "accountMax": null,
                            "cardMax": 50000,
                            "cardCurrent": 123,
                            "used": 10,
                            "usedCredit": null
                          },
                          "dueDate": null,
                          "availableFunds": null,
                          "paymentScheme": "MASTERCARD",
                          "delivery": {
                            "status": "ORDERED",
                            "expectedDate": "2021-05-28",
                            "orderDate": "2021-05-13",
                            "sentDate": null,
                            "address": {
                              "streetName": "Cicha",
                              "streetNumber": "16",
                              "apartment": "2",
                              "city": "Warsaw",
                              "postal": "05-230",
                              "country": "PL"
                            },
                            "shipmentNumber": "",
                            "shipmentCompanyName": ""
                          },
                          "autoRenewalForPlasticOrder": false,
                          "plasticVisualCode": "PINK",
                          "virtualVisualCode": ""
                        }
                      ],
                      "accounts": [
                        {
                          "iban": "BE03648773605684",
                          "status": "ACTIVE",
                          "unclosed": true
                        }
                      ],
                      "creditAccounts": []
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/pin/{pinNumber}/validate": {
      "post": {
        "tags": [
          "Card PIN Validation"
        ],
        "summary": "Validate PIN code security - NOT TO BE USED.",
        "description": "<h2>NON PROD VERIFICATION ENDPOINT - NOT TO BE USED<h2>\n\nEnables to validate provided PIN code: \n * must be 4 digits\n * digits cannot be the same\n * digits cannot create a sequence",
        "operationId": "checkIfSecure",
        "parameters": [
          {
            "name": "pinNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Type",
            "in": "header",
            "description": "Type of a customer - RETAIL_CUSTOMER",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Customer-Id",
            "in": "header",
            "description": "Identification number of a customer",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Representative-Id",
            "in": "header",
            "description": "Identification number of a representative - should be the same as X-Customer-Id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "X-Request-Id",
            "in": "header",
            "description": "A random value in a UUID v4 format that provides a request traceability",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Possible codes: NOT_CARD_OWNER, INSUFFICIENT_FUNDS, CARDS_LIMIT_REACHED, CLIENT_ACCOUNT_BLOCKED, FORMAT_EXCEPTION, VALIDATION_ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "CLIENT_ACCOUNT_BLOCKED",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          },
          "403": {
            "description": "Forbidden - X-Token may be invalid"
          },
          "404": {
            "description": "Not Found - entity not found - Possible codes: ACCOUNT_NOT_FOUND_ERROR_CODE, CARD_NOT_FOUND_ERROR_CODE, CUSTOMER_PACKAGE_NOT_FOUND_ERROR_CODE, RETAIL_CUSTOMER_NOT_FOUND_ERROR_CODE, ACCOUNT_PRODUCT_NOT_FOUND_ERROR_CODE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "ACCOUNT_NOT_FOUND_ERROR_CODE",
                      "params": null,
                      "message": "Account does not exist, IBAN: ..."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDTO"
                },
                "examples": {
                  "json-response": {
                    "value": {
                      "timestamp": "2021-05-26T12:35:43.878+00:00",
                      "requestId": "5b73a6a7-f3f3-4218-96e4-ca7a54130989",
                      "errorCode": "INTERNAL_SERVER_ERROR",
                      "params": null,
                      "message": null
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorDTO": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "requestId": {
            "type": "string",
            "format": "uuid"
          },
          "errorCode": {
            "type": "string"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "EncryptedRequest": {
        "required": [
          "publicKeyOrCertificate"
        ],
        "type": "object",
        "properties": {
          "publicKeyOrCertificate": {
            "type": "string",
            "description": "public key or certificate to encrypt returned security data"
          },
          "operationId": {
            "type": "string",
            "description": "id of authorization operation to verify"
          }
        }
      },
      "CvcEncryptedResponse": {
        "type": "object",
        "properties": {
          "encryptedCvc": {
            "type": "string",
            "writeOnly": true
          },
          "cvc": {
            "type": "string"
          }
        }
      },
      "SecurityDataRequest": {
        "required": [
          "cardExpiryDate",
          "operationId",
          "publicKeyOrCertificate"
        ],
        "type": "object",
        "properties": {
          "cardExpiryDate": {
            "type": "string",
            "description": "card expiry date as year and month [YYMM]"
          },
          "publicKeyOrCertificate": {
            "type": "string",
            "description": "public key or certificate to encrypt security data"
          },
          "operationId": {
            "type": "string",
            "description": "id of authorization operation to verify"
          }
        }
      },
      "SecurityDataResponse": {
        "required": [
          "encryptedPAN",
          "encryptedSecurityValue",
          "encryptedZPK"
        ],
        "type": "object",
        "properties": {
          "encryptedPAN": {
            "type": "string",
            "description": "encrypted PAN number"
          },
          "encryptedSecurityValue": {
            "type": "string",
            "description": "encrypted PIN"
          },
          "encryptedZPK": {
            "type": "string",
            "description": "encrypted ZPK needed to decrypt PIN"
          }
        }
      },
      "CardStatusData": {
        "type": "object",
        "properties": {
          "productionStatus": {
            "type": "string"
          },
          "statusCode": {
            "type": "string"
          },
          "statusDetails": {
            "type": "string"
          }
        },
        "description": "card status details"
      },
      "DetailsEncryptedPANResponse": {
        "required": [
          "card",
          "encryptedPAN"
        ],
        "type": "object",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/MptsCard"
          },
          "encryptedPAN": {
            "type": "string",
            "description": "encrypted PAN number"
          }
        }
      },
      "EmbossedData": {
        "type": "object",
        "properties": {
          "embossedCompanyName": {
            "type": "string",
            "description": "company name of card holder to appear on plastic card"
          },
          "embossedFirstName": {
            "type": "string",
            "description": "first name of card holder to appear on plastic card"
          },
          "embossedLastName": {
            "type": "string",
            "description": "last name of card holder to appear on plastic card"
          },
          "embossedTitle": {
            "type": "string",
            "description": "title to appear on plastic card"
          }
        },
        "description": "embossed data for plastic card"
      },
      "MptsCard": {
        "type": "object",
        "properties": {
          "accountContractNumber": {
            "type": "string",
            "description": "account contract number"
          },
          "accountID": {
            "type": "string",
            "description": "account id number in MPTS system"
          },
          "amendmentDate": {
            "type": "string",
            "description": "date of the latest amendment",
            "format": "date-time"
          },
          "amendmentOfficer": {
            "type": "string",
            "description": "person which made an amendment"
          },
          "availableBalance": {
            "type": "number",
            "description": "available balance on an account"
          },
          "cardContractNumber": {
            "type": "string",
            "description": "card PAN -First six digits is BankIdentification Number (BIN), followed by a variable lengthup to 12 digits and one single check digit at the end"
          },
          "cardExpiryDate": {
            "type": "string",
            "description": "card expiry date as year and month"
          },
          "cardID": {
            "type": "string",
            "description": "card id number in MPTS system"
          },
          "cardStatusData": {
            "$ref": "#/components/schemas/CardStatusData"
          },
          "cardholderID": {
            "type": "string",
            "description": "card holder id number in MPTS system"
          },
          "cardholderNumber": {
            "type": "string",
            "description": "card holder customer id"
          },
          "cardholderShortName": {
            "type": "string",
            "description": "card holder short name"
          },
          "cbsNumber": {
            "type": "string",
            "description": "account identifier inside the core banking system UsuallyIBAN - full account number according to ISO 13616 standard"
          },
          "contractName": {
            "type": "string",
            "description": "contract name (free text field)"
          },
          "currency": {
            "type": "string",
            "description": "main currency of a card ISO-4217 currency code"
          },
          "dateOpen": {
            "type": "string",
            "description": "date of card creation"
          },
          "embossedData": {
            "$ref": "#/components/schemas/EmbossedData"
          },
          "productName": {
            "type": "string",
            "description": "name of card product"
          }
        },
        "description": "card data obtained from MPTS system"
      },
      "IIDDCertificate": {
        "type": "object",
        "properties": {
          "walletCertificate": {
            "type": "string"
          }
        }
      },
      "IIDDRequest": {
        "required": [
          "initiateDigitizationData",
          "keyIndex",
          "rbsNumber"
        ],
        "type": "object",
        "properties": {
          "keyIndex": {
            "type": "string",
            "description": "index of the RSA key used do encrypt IIDD "
          },
          "initiateDigitizationData": {
            "type": "string",
            "description": "initiate digitization data generated for a card according to issuer requirements"
          },
          "rbsNumber": {
            "type": "string",
            "description": "card reference number"
          },
          "walletCertificatesList": {
            "type": "array",
            "description": "list of wallet IIDD certificates for Apple",
            "items": {
              "$ref": "#/components/schemas/IIDDCertificate"
            }
          }
        }
      },
      "IIDDResponse": {
        "type": "object",
        "properties": {
          "issuerInitiatedDigitizationData": {
            "type": "string"
          }
        }
      },
      "CardLimitDTO": {
        "type": "object",
        "properties": {
          "monthlySpendingLimit": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PINSetEncryptedDTO": {
        "required": [
          "cardExpiryDate",
          "keyIndex",
          "newPINBlock"
        ],
        "type": "object",
        "properties": {
          "cardExpiryDate": {
            "type": "string",
            "description": "card expiry date as year and month [yyMM]"
          },
          "keyIndex": {
            "type": "string",
            "description": "key index that was used to generate pinblock"
          },
          "newPINBlock": {
            "type": "string",
            "description": "PIN block generated from new PIN code according to documentation"
          }
        }
      },
      "CardDeliveryAddressDTO": {
        "required": [
          "city",
          "country",
          "postal",
          "streetName",
          "streetNumber"
        ],
        "type": "object",
        "properties": {
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "apartment": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        },
        "description": "plastic card delivery address"
      },
      "EmbossedDataDTO": {
        "type": "object",
        "description": "Data to appear on plastic card. Supports special chars:  Ä ä Ö ö Ü ü - '",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "first name of card holder to appear on plastic card"
          },
          "lastName": {
            "type": "string",
            "description": "last name of card holder to appear on plastic card"
          },
          "companyName": {
            "type": "string",
            "description": "company name of card holder to appear on plastic card"
          }
        },
        "required": [
          "firstName",
          "lastName"
        ]
      },
      "PhysicalCardOrderDTO": {
        "required": [
          "deliveryAddress",
          "deliveryMode",
          "embossedData",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "first name of card holder"
          },
          "lastName": {
            "type": "string",
            "description": "last name of card holder"
          },
          "companyName": {
            "type": "string",
            "description": "company name of card holder"
          },
          "embossedData": {
            "$ref": "#/components/schemas/EmbossedDataDTO"
          },
          "deliveryMode": {
            "type": "string",
            "description": "delivery mode of plastic card [STANDARD, EXPRESS]"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/CardDeliveryAddressDTO"
          },
          "plasticVisualCode": {
            "type": "string"
          }
        }
      },
      "AmountDTO": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "DeliveryMethodDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "id of delivery method type 1 - STANDARD, 2 - EXPRESS",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "description": "planned delivery date",
            "format": "date"
          },
          "fee": {
            "$ref": "#/components/schemas/AmountDTO"
          }
        }
      },
      "CreateCardDTO": {
        "required": [
          "cardType",
          "iban"
        ],
        "type": "object",
        "properties": {
          "iban": {
            "type": "string",
            "description": "IBAN number of an account for which card should be issued"
          },
          "cardType": {
            "type": "string",
            "description": "type of the card",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "paymentScheme": {
            "type": "string",
            "description": "payment scheme of the card allowed for given customer",
            "enum": [
              "MASTERCARD",
              "MAESTRO"
            ]
          },
          "virtualVisualCode": {
            "type": "string",
            "description": "code of the specific card appearance with which card will be presented later in virtual form (dictionary value)"
          }
        }
      },
      "CardDTO": {
        "type": "object",
        "properties": {
          "panFourLastDigits": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "description": "card holder first name"
          },
          "lastName": {
            "type": "string",
            "description": "card holder last name"
          },
          "companyName": {
            "type": "string",
            "description": "card holder company"
          },
          "customerName": {
            "type": "string",
            "description": "card holder customer name"
          },
          "type": {
            "type": "string",
            "enum": [
              "CREDIT",
              "DEBIT"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "REPORTED_LOST_STOLEN",
              "FROZEN",
              "DRAFT",
              "ACTIVE",
              "CLOSED"
            ]
          },
          "rbsNumber": {
            "type": "string",
            "description": "card reference number"
          },
          "plasticForm": {
            "type": "boolean",
            "description": "flag indicating if plastic card was issued"
          },
          "locked": {
            "type": "boolean",
            "description": "flag indicating if card is locked (user cannot change status)"
          },
          "possibleActions": {
            "uniqueItems": true,
            "type": "array",
            "description": "actions possible for a card based on its actual state",
            "items": {
              "type": "string",
              "description": "actions possible for a card based on its actual state",
              "enum": [
                "ORDER_NEW",
                "UNLOCK",
                "RESTRICT",
                "HISTORY",
                "LOCK",
                "ORDER_PHYSICAL",
                "REMOVE",
                "SETTINGS",
                "CLEAR_PIN_ATTEMPTS",
                "SHOW_PIN",
                "CLEAR_CVC_ATTEMPTS",
                "RENEW",
                "MANAGE_TOKENS"
              ]
            }
          },
          "bin": {
            "type": "string",
            "description": "BIN number of card account"
          },
          "mainAccount": {
            "type": "string",
            "description": "name of main card account"
          },
          "accountInternalName": {
            "type": "string",
            "description": "internal name of card account"
          },
          "limit": {
            "$ref": "#/components/schemas/Limit"
          },
          "dueDate": {
            "type": "string",
            "description": "due date for CREDIT card",
            "format": "date"
          },
          "availableFunds": {
            "$ref": "#/components/schemas/HiLoAmount"
          },
          "paymentScheme": {
            "type": "string",
            "enum": [
              "MASTERCARD",
              "MAESTRO"
            ]
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "autoRenewalForPlasticOrder": {
            "type": "boolean",
            "description": "flag indicating if plastic card should be automatically renewed after expiration"
          },
          "plasticVisualCode": {
            "type": "string"
          },
          "virtualVisualCode": {
            "type": "string"
          }
        }
      },
      "Delivery": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "expectedDate": {
            "type": "string",
            "format": "date"
          },
          "orderDate": {
            "type": "string",
            "format": "date"
          },
          "sentDate": {
            "type": "string",
            "format": "date"
          },
          "address": {
            "$ref": "#/components/schemas/DeliveryAddress"
          },
          "shipmentNumber": {
            "type": "string"
          },
          "shipmentCompanyName": {
            "type": "string"
          }
        }
      },
      "DeliveryAddress": {
        "type": "object",
        "properties": {
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "apartment": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "HiLoAmount": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "description": "available funds for CREDIT card"
      },
      "Limit": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "flag indicating if card limit is enabled"
          },
          "currency": {
            "type": "string"
          },
          "accountMax": {
            "type": "number",
            "description": "max amount of card transactions for current account"
          },
          "cardMax": {
            "type": "number",
            "description": "global max amount of card transactions for card product"
          },
          "cardCurrent": {
            "type": "number",
            "description": "max amount of card transactions for current card"
          },
          "used": {
            "type": "number",
            "description": "used amount of card transactions for current card"
          },
          "usedCredit": {
            "type": "number"
          }
        }
      },
      "CardSettingsDTO": {
        "required": [
          "abroadPayments",
          "cardStripeTransactions",
          "cashWithdraws",
          "contactless",
          "ecommerce",
          "geoSecurity"
        ],
        "type": "object",
        "properties": {
          "contactless": {
            "type": "boolean",
            "description": "flag indicating if customer prefer to always confirm the transaction with the PIN"
          },
          "cashWithdraws": {
            "type": "boolean",
            "description": "flag indicating if customer do not need ATM cash withdrawals for now"
          },
          "ecommerce": {
            "type": "boolean",
            "description": "flag indicating if customer do not plan ecommerce shopping"
          },
          "cardStripeTransactions": {
            "type": "boolean",
            "description": "flag indicating if customer prefers to disable magstripe, that prevents transactions when card is copied"
          },
          "geoSecurity": {
            "type": "boolean",
            "description": "flag indicating if GPS location is used in order to prevent fraudulent transactions"
          },
          "abroadPayments": {
            "type": "boolean",
            "description": "flag indicating if all abroad transactions in Point of sales are blocked"
          }
        }
      },
      "CardSettingsRequestDTO": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean",
            "description": "value of setting switch"
          }
        }
      },
      "PublicRSAKeyResponse": {
        "required": [
          "keyIndex",
          "publicRSAKey"
        ],
        "type": "object",
        "properties": {
          "keyIndex": {
            "type": "string"
          },
          "publicRSAKey": {
            "type": "string"
          }
        }
      },
      "CustomerAddressDTO": {
        "type": "object",
        "properties": {
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "apartment": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postal": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "AccountDTO": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "unclosed": {
            "type": "boolean"
          }
        }
      },
      "CreditAccountDTO": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "internalName": {
            "type": "string"
          },
          "limit": {
            "$ref": "#/components/schemas/HiLoAmount"
          },
          "availableFunds": {
            "$ref": "#/components/schemas/HiLoAmount"
          },
          "unclosed": {
            "type": "boolean"
          }
        }
      },
      "CustomerDTO": {
        "type": "object",
        "properties": {
          "packageType": {
            "type": "string"
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardDTO"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDTO"
            }
          },
          "creditAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditAccountDTO"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "X-Token": {
        "type": "apiKey",
        "description": "OAuth 2.0 access token",
        "name": "X-Token",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}